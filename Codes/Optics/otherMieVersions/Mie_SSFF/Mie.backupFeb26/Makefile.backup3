#$preamble
#
# Script initially inspired by:
# http://www.webalice.it/o.drofa/davide/makefile-fortran/makefile-fortran.html
# 
# A simple hand-made makefile, optionally allowing to use different directories for SRC/BIN/MOD/OBJS.
# - Kevin van As
#
#
# This makefile works with the GNU make command, the one find on
# GNU/Linux systems and often called gmake on non-GNU systems.
#
#
# ======================================================================
# PWDs Variables
# ======================================================================
#
# Use "." to not use a separate directory for the given files:
# WARNING: You might want to run 'make veryclean' before changing these,
#          as it will affect the cleaning behaviour as well!
# WARNING: Do NOT append the names with spacebars/tabs: you are asking for trouble.
# Source code-directory 				= .f90/.F90 files:
SRCDIR = src
# Compiled (object) directory 			= .o files:
OBJDIR = objs
# Compiled headers (modules) directory 	= .mod files:
MODDIR = mods
# Directory for the created executables:
BINDIR = .

# The directory (absolute path) in which this Makefile is contained:
ROOT_DIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))

# For the validator:
BHMIE_PWD = $(ROOT_DIR)/../../Codes_downloaded/BohrenHuffmanMie_F90

# ======================================================================
# 
# Let's start with the declarations (flags etc.)
#
# ======================================================================

# The compiler
FC = gfortran
# flags for debugging or for maximum performance, comment as necessary
# FCFLAGS += -g -fbounds-check
FCFLAGS += -O2
#FCFLAGS += -Wall
# flags forall (e.g. look for system .mod files, required in gfortran)
FCFLAGS +=	-I/usr/include \
			-I$(BHMIE_PWD)


# libraries needed for linking
LDFLAGS +=	-L$(BHMIE_PWD)
LDFLAGS += -lbhmie
#LDFLAGS += --verbose

# List of executables to be built within the package (prepend $(BINDIR) to each!)
PROGRAMS = $(BINDIR)/mybhmie_start $(BINDIR)/MieAlgorithmFF #$(BINDIR)/validator 
# List of all objects to be used by all programs
ALLOBJECTS = $(OBJDIR)/class_SphereManager.o $(OBJDIR)/class_Camera.o $(OBJDIR)/class_Sphere.o $(OBJDIR)/mybhmie.o $(OBJDIR)/booleanFunctions.o $(OBJDIR)/mymath.o $(OBJDIR)/iomod.o $(OBJDIR)/DEBUG.o

# Modules which are used by all modules (e.g., DEBUG, global constants):
INHERIT_BY_ALL = $(MODDIR)/DEBUG.mod


#$intro
# "make" builds all
all: $(PROGRAMS)

# ======================================================================
# 
# Rules for building (dependencies)
#
# (WARNING: Be careful to prepend the appropriate path variable!)
#
# --> Note that using verbose dependencies (listing dependencies which aren't
# dependencies of the target), will not cause any error. For big projects,
# however, it will cause excessive re-compilation of code which needs not
# be recompiled. The latter occurs when one of the verbose dependencies is
# modified (and thus the Makefile concludes that the target needs recompilation),
# whereas the target does not depend on the file you modified. For small projects,
# this is not a problem. Consequently, for ease, you could make everything depend
# on everything, such that you need not track the dependencies yourself.
# --> The opposite, using too few dependencies, will raise errors if 'make' is
# called from a clean state (typically "undefined reference to" or
# "Can't open module file ..."). If 'make' is called from a state in which
# the forgotten dependencies already exist, then no error will be raised.
# However, if you change those forgotten dependencies, the Makefile will not
# recompile them, since they are not listed as dependencies.
#
# ======================================================================

#$(OBJDIR)/mybhmie_start.o: $(MODDIR)/mybhmie.mod

#$(OBJDIR)/MieAlgorithmFF.o: $(MODDIR)/class_SphereManager.mod $(MODDIR)/class_Camera.mod $(MODDIR)/iomod.mod $(MODDIR)/mybhmie.mod $(MODDIR)/mymath.mod

#$(OBJDIR)/class_SphereManager.o: $(MODDIR)/class_Sphere.mod

#$(OBJDIR)/validator.o: $(MODDIR)/mybhmie.mod $(MODDIR)/booleanFunctions.mod

#$conclusion
#
#
#
# ======================================================================
# And now the general rules, these should NOT require MODIFIcation
# ======================================================================
#
#
#

# Make all programs require all objects for linking
# Advantage: Saves my precious time, because I need not carefully select the required object files for each executable.
# Disadvantange: Increases the executable size by including unnecessary files. This is generally not a problem, as a single Makefile should not be used for creating significantly different executables.
$(PROGRAMS): $(ALLOBJECTS)

# Everything depends on $(INHERIT_BY_ALL):
$(ALLOBJECTS): $(INHERIT_BY_ALL)

# Create temp. directories
ifneq ($(OBJDIR),.) # Only if OBJDIR is not the current directory.
$(OBJDIR):
	mkdir -p $(OBJDIR)
endif

ifneq ($(MODDIR),.) # Only if MODDIR is not the current directory.
$(MODDIR):
	mkdir -p $(MODDIR)
endif

ifneq ($(BINDIR),.) # Only if BINDIR is not the current directory.
$(BINDIR):
	mkdir -p $(BINDIR)
endif

# General rule for building prog from prog.o; $^ (GNU extension) is
# used in order to list additional object files on which the
# executable depends
# $@ lists the target itself.
# The % is a wildcard.
$(BINDIR)/%: $(OBJDIR)/%.o | $(BINDIR) 
	$(FC) $(FCFLAGS) -o $@ $^ $(LDFLAGS)

# General rule for building a .mod file.
# These are automatically generated when the .o file is generated, so by making
# the .mod dependent on the .o, they are automatically generated.
$(MODDIR)/%.mod: $(OBJDIR)/%.o
	
#     Note: There is a "TAB" on the line above this line, which is for-some-reason OBLIGATORY!
#     Otherwise an error occurs: "no rule to make target `mod_dir/*.mod' ..."

# General rules for building prog.o from prog.f90 or prog.F90; $< is
# used in order to list only the first prerequisite (the source file)
# and not the additional prerequisites such as module or include files
$(OBJDIR)/%.o: $(SRCDIR)/%.f90 | $(OBJDIR) $(MODDIR)
	$(FC) $(FCFLAGS) -c $< -o $@ -J$(MODDIR)

$(OBJDIR)/%.o: $(SRCDIR)/%.F90 | $(OBJDIR) $(MODDIR)
	$(FC) $(FCFLAGS) -c $< -o $@ -J$(MODDIR)

# Utility targets
.PHONY: clean veryclean

#  Clean with "cannot remove current directory", hence the if statement.
#  Also checks whether the directory is empty.
#   This prevents removing the directory if e.g. SRCDIR==MODDIR.
clean:
#	[ "$(ls -A /path/to/directory)" ] && echo "Not Empty" || echo "Empty"
	rm -f $(OBJDIR)/*.o
	rm -f $(MODDIR)/*.mod
	rm ./.depend
ifneq ($(OBJDIR),.) # Only if OBJDIR is not the current directory.
	[ -d $(OBJDIR) ] && [ "`ls -A $(OBJDIR)`" ] && echo "$(OBJDIR) Not Empty" || rm -rf $(OBJDIR);
endif
ifneq ($(MODDIR),.) # Only if MODDIR is not the current directory.
	[ -d $(MODDIR) ] && [ "`ls -A $(MODDIR)`" ] && echo "$(MODDIR) Not Empty" || rm -rf $(MODDIR);
endif
#	if [ "$(OBJDIR)" != "." ]; then rm -rf $(OBJDIR); else rm -f *.o; fi 
#	if [ "$(MODDIR)" != "." ]; then rm -rf $(MODDIR); else rm -f *.mod; fi 
	echo ""; echo "	<< '.o' and '.mod' files have been removed. Use 'make veryclean' to remove the executables as well >>"; echo "";

veryclean: clean
	rm -f *~
	rm -f $(SRCDIR)/*~
	rm -f $(PROGRAMS)
ifneq ($(BINDIR),.) # Only if BINDIR is not the current directory.
	[ -d $(BINDIR) ] && [ "`ls -A $(BINDIR)`" ] && echo "$(BINDIR) Not Empty" || rm -rf $(BINDIR);
endif
#	if [ "$(BINDIR)" != "." ]; then rm -rf $(BINDIR); else rm -f $(PROGRAMS); fi 

depend: $(SRCDIR)/*.f90 | $(MODDIR)
	rm -f ./.depend
	$(FC) $(FCFLAGS) -cpp -MM $^ -J$(MODDIR) >> ./.depend;

-include .depend




# EOF: Makefile
